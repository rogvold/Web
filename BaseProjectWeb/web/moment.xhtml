<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <title>History Test Page</title>
        <script type="text/javascript" src="./js/moment.min.js" />
        <script type="text/javascript" src="./js/history.js" />

        <script src="#{request.contextPath}/templates/lion/js/jquery.min.js" type="text/javascript" />

        <script type="text/javascript" src="../timeline/timeline.js"></script>
        <link rel="stylesheet" type="text/css" href="../timeline/timeline.css" />


        <script type="text/javascript" src="http://www.google.com/jsapi"></script>
        <style type="text/css">
            body {font: 10pt arial;}

            div.timeline-event {
                border: none;
                background: none;
                border-radius: 0;
            }
            div.timeline-event-selected {
                border: none;
                background: none;
            }
            div.timeline-event-content {
                margin: 0;
            }
            div.timeline-event-range {
                border: none;
                border-radius: 0;
                height: 100px;
                width: 100%;
                position: relative;
                overflow: visible;
            }
            div.bar {
                position: absolute;
                bottom: 0;
                left: 0;
                width: 100%;
                text-align: center;
                color: white;
                border-left: 1px solid #BEBEBE;
                /* height and color is set for each individual bar */
            }
            div.requirement {
                position: absolute;
                bottom: 0;
                left: 0;
                width: 100%;
                border-top: 2px solid gray;
                background: #e5e5e5;
                opacity: 0.5;
            }
        </style>
        <script type="text/javascript">
            $(function(){
                initTimeline();
            });
        </script>

        <script type="text/javascript">
            //<![CDATA[
            var timeline;
            var gdata;
            google.load("visualization", "1");
            function initTimeline(){
                gdata = new google.visualization.DataTable();
                gdata.addColumn('datetime', 'start');
                gdata.addColumn('datetime', 'end');
                gdata.addColumn('string', 'content');
                
                console.log('initTimeline');
                selectedStart = new Date();
                currentScale = ScaleEnum.OVERALL;
                sp = new SessionsPool();
                sp.loadSessions();
                draw();
            }
            


            /**
             * Calculate the color based on the given value.
             * @param {number} H   Hue, a value be between 0 and 360
             * @param {number} S   Saturation, a value between 0 and 1
             * @param {number} V   Value, a value between 0 and 1
             */
            var hsv2rgb = function(H, S, V) {
                var R, G, B, C, Hi, X;

                C = V * S;
                Hi = Math.floor(H/100);  // hi = 0,1,2,3,4,5
                X = C * (1 - Math.abs(((H/100) % 2) - 1));

                switch (Hi) {
                    case 0: R = C; G = X; B = 0; break;
                    case 1: R = X; G = C; B = 0; break;
                    case 2: R = 0; G = C; B = X; break;
                    case 3: R = 0; G = X; B = C; break;
                    case 4: R = X; G = 0; B = C; break;
                    case 5: R = C; G = 0; B = X; break;

                    default: R = 0; G = 0; B = 0; break;
                }

                return "RGB(" + parseInt(R*255) + "," + parseInt(G*255) + "," + parseInt(B*255) + ")";
            };
            
            function onselect(event){
                md = event;
                var row = undefined;
                var sel = timeline.getSelection();
                if (sel.length) {
                    if (sel[0].row != undefined) {
                        var row = sel[0].row;
                    }
                }

                if (row != undefined) {
                    var content = gdata.getValue(row, 0);
                    
                    selectedStart = gdata.getValue(row,0);
                    selectedEnd = gdata.getValue(row,1);
                    zoomIn();

                    //                    console.log('selected: ' + start + ' - ' + end);
                }
            }
            
            function draw(){
                if (selectedStart == undefined){
                    selectedStart = (new Date()).getTime();
                }
                myInterv = sp.getMyInterval(selectedStart.getTime(), currentScale);
                drawHistoryVisualization(myInterv);
            }
            
            function zoomOut(){
                currentScale = getPrevScale(currentScale);
                draw();
            }
            
            function zoomIn(){
                currentScale = getNextScale(currentScale);
                draw();
            }
            
            function drawHistoryVisualization(myInterval) {

                
                // Create and populate a data table.
                var data = [];

                var maxNum = 20;
                var d = new Date(2012, 6, 5);
                
                var maxTension = 200;
                
                for (var i = 0; i < myInterval.bars.length; i++) {
                    var bar = myInterval.bars[i];
                    
                    //                    var hours = Math.round(1 + Math.random() * 7);
                    var start = new Date(bar.start);
                    var end = new Date(bar.end);
                    //                    end.setHours(end.getHours() + hours);

                    // create item with minimum requirement// max
                    var style = 'height:' + maxTension + 'px;';
                    var requirement = '<div class="requirement" style="' + style + '" ' +
                        'title="Max tension: ' + maxTension + ' "></div>';

                    var hue = Math.min(Math.max(bar.max, 20), 80) * 1.6; // hue between 0 (red) and 120 (green)
                    var color = hsv2rgb(180 - hue, 0.95, 0.95);
                    var borderColor = hsv2rgb(hue, 0.9, 0.9);
                    style = 'height:' + 2 * bar.max + 'px;' +
                        'background-color: ' + color + ';' +
                        'border-top: 2px solid ' + borderColor + ';';
                    var maxim = '<div class="bar" style="' + style + '" ' +
                        ' title="Max tension: ' + bar.max + ' ">' + bar.max + '</div>';


                    hue = Math.min(Math.max( bar.avr, 20), 80) * 1.6; // hue between 0 (red) and 120 (green)
                    color = hsv2rgb(180 - hue, 0.95, 0.95);
                    borderColor = hsv2rgb(hue, 0.9, 0.9);
                    style = 'height:' + 2 *  bar.avr + 'px;' +
                        'background-color: ' + color + ';' +
                        'border-top: 2px solid ' + borderColor + ';';
                    average = '<div class="bar" style="' + style + '" ' +
                        ' title="Avr tension: ' + bar.avr + ' ">' + bar.avr + '</div>';
                    
                    // create item with actual number
                    hue = Math.min(Math.max(bar.min, 20), 80) * 1.2; // hue between 0 (red) and 120 (green)
                    color = hsv2rgb(180 - hue, 0.95, 0.95);
                    borderColor = hsv2rgb(hue, 0.9, 0.9);
                    style = 'height:' + 2*  bar.min + 'px;' +
                        'background-color: ' + color + ';' +
                        'border-top: 2px solid ' + borderColor + ';';
                    var minim = '<div class="bar" style="' + style + '" ' +
                        ' title="Min tension: ' + bar.min + ' ">' + bar.min + '</div>';
                    
                    var item = {
                        'group': '',
                        'start': start,
                        'end': end,
                        'content': requirement +
                            maxim + 
                            average + minim
                    };
                    gdata.addRow([item.start, item.end, item.content]);
                    //                    [item.start, item.end, item.content]
                    data.push(item);
                    
                    d = new Date(end);
                }

                // specify options
                var options = {
                    "min": new Date(myInterval.start - 1000*3600*5),
                    "max:": new Date(myInterval.end + 1000*3600*5),
                    "zoomMin": 1000 * 60 * 60 * 24,
                    "zoomMax": 1000 * 60 * 60 * 24 * 31 * 3,
                    "width":  "100%",
                    "height": "300px",
                    "style": "box"
                };

                // Instantiate our timeline object.
                timeline = new links.Timeline(document.getElementById('mytimeline'));


                google.visualization.events.addListener(timeline, 'select', onselect);

                // Draw our timeline with the created data and options
                timeline.draw(data, options);
            }
            
            //]]>
        </script>

    </head>
    <body onload="drawHistoryVisualization();">
        <h1>Timeline - Bar Graph Example</h1>
        <div id="mytimeline"></div>

        current scale: <span id="scale">OVERALL</span>

        <button onclick="zoomOut();">zoom out</button>

    </body>
</html>
